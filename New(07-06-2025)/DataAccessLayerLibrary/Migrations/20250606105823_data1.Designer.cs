// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayerLibrary.Migrations
{
    [DbContext(typeof(TravelEzeeEFContext))]
    [Migration("20250606105823_data1")]
    partial class data1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Booking", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BookBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeatCount")
                        .HasColumnType("int");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("TravelDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BookId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Location", b =>
                {
                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("LocationDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationId = 101L,
                            LocationName = "Chennai"
                        },
                        new
                        {
                            LocationId = 102L,
                            LocationName = "Hyderabad"
                        },
                        new
                        {
                            LocationId = 103L,
                            LocationName = "Bangalore"
                        });
                });

            modelBuilder.Entity("Service", b =>
                {
                    b.Property<long>("ServId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ServId"));

                    b.Property<long>("DestLocId")
                        .HasColumnType("bigint");

                    b.Property<double>("Distance")
                        .HasColumnType("float");

                    b.Property<long>("ServTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("SourceLocId")
                        .HasColumnType("bigint");

                    b.HasKey("ServId");

                    b.HasIndex("DestLocId");

                    b.HasIndex("ServTypeId");

                    b.HasIndex("SourceLocId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("ServiceType", b =>
                {
                    b.Property<long>("ServTypeId")
                        .HasColumnType("bigint");

                    b.Property<double>("PricePerKm")
                        .HasColumnType("float");

                    b.Property<string>("ServiceTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ServTypeId");

                    b.HasIndex("ServiceTypeName")
                        .IsUnique();

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            ServTypeId = 201L,
                            PricePerKm = 10.0,
                            ServiceTypeName = "ServType1"
                        },
                        new
                        {
                            ServTypeId = 202L,
                            PricePerKm = 15.0,
                            ServiceTypeName = "ServType2"
                        },
                        new
                        {
                            ServTypeId = 203L,
                            PricePerKm = 20.0,
                            ServiceTypeName = "ServType3"
                        });
                });

            modelBuilder.Entity("Booking", b =>
                {
                    b.HasOne("Service", "TravelService")
                        .WithMany("CurBookings")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TravelService");
                });

            modelBuilder.Entity("Service", b =>
                {
                    b.HasOne("Location", "DestLocationsId")
                        .WithMany("ServiceDestList")
                        .HasForeignKey("DestLocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceType", "ServiceTypeId")
                        .WithMany("ServiceLists")
                        .HasForeignKey("ServTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Location", "SourceLocationsId")
                        .WithMany("ServiceSourceList")
                        .HasForeignKey("SourceLocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestLocationsId");

                    b.Navigation("ServiceTypeId");

                    b.Navigation("SourceLocationsId");
                });

            modelBuilder.Entity("Location", b =>
                {
                    b.Navigation("ServiceDestList");

                    b.Navigation("ServiceSourceList");
                });

            modelBuilder.Entity("Service", b =>
                {
                    b.Navigation("CurBookings");
                });

            modelBuilder.Entity("ServiceType", b =>
                {
                    b.Navigation("ServiceLists");
                });
#pragma warning restore 612, 618
        }
    }
}
